name: Build & Sync CV

on:
  push:
    branches: [ main ]
    paths:
      - 'CV/**'
      - 'achievements/szkolenia/ListaSzkolen.md'
      - 'achievements/uczelnia/OpisZajęć.md'
      - 'achievements/uczelnia/OpisZajec.md'
      - 'portfolio/README.md'
      - 'portfolio/portfolio.md'
      - 'CV/cv-multilang.md'
      - '.github/workflows/build-cv.yml'
      - 'README.md'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a GitHub Release with current CV assets'
        required: false
        default: 'false'

permissions:
  contents: write

jobs:
  sync:
    name: Sync CV files to docs/
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure docs exists
        run: mkdir -p docs

      - name: Copy CV files (PL required/ENG optional) to docs with stable names
        id: copy
        shell: bash
        run: |
          set -euo pipefail
          export LANG=C.UTF-8
          copied=0

          copy_if_exists () {
            local src="$1"; local dst="$2"
            if [ -f "$src" ]; then
              cp -f "$src" "$dst"
              echo "✔ $src -> $dst"
              copied=1
            else
              echo "… (skip) $src (not found)"
            fi
          }

          # --- CV (jak masz) ---
          copy_if_exists "CV/PL/Sebastian_Ciborowski_CV.pdf"       "docs/Sebastian_Ciborowski_CV_PL.pdf"
          copy_if_exists "CV/PL/Sebastian_Ciborowski_CV.docx"      "docs/Sebastian_Ciborowski_CV_PL.docx"
          copy_if_exists "CV/ENG/Sebastian_Ciborowski_CV_ENG.pdf"  "docs/Sebastian_Ciborowski_CV_EN.pdf"
          copy_if_exists "CV/ENG/Sebastian_Ciborowski_CV_ENG.docx" "docs/Sebastian_Ciborowski_CV_EN.docx"

          # --- Nowe treści (mirror do /docs) ---
          copy_if_exists "achievements/szkolenia/ListaSzkolen.md"       "docs/Lista_Szkolen.md"
          copy_if_exists "achievements/uczelnia/OpisZajęć.md"           "docs/Opis_Zajec.md"
          copy_if_exists "achievements/uczelnia/OpisZajec.md"           "docs/Opis_Zajec.md"   # fallback bez diakrytyków
          copy_if_exists "portfolio/README.md"                          "docs/Portfolio.md"
          copy_if_exists "portfolio/portfolio.md"                       "docs/Portfolio.md"    # alternatywa
          copy_if_exists "CV/cv-multilang.md"                           "docs/cv-cv.md"

          echo "copied=${copied}" >> "$GITHUB_OUTPUT"

                # ⬇⬇⬇ NOWY KROK — NORMALIZACJA ŚCIEŻEK DO IKON (tylko gdy coś skopiowano) ⬇⬇⬇
      - name: Normalize icon paths for Pages
        if: steps.copy.outputs.copied == '1'
        shell: bash
        run: |
          normalize_md () {
            f="$1"
            [ -f "$f" ] || return 0
            # Najpierw najbardziej zagnieżdżone warianty, potem płytsze:
            sed -i \
              -e 's|\.\./\.\./docs/assets/|assets/|g' \
              -e 's|\.\./docs/assets/|assets/|g' \
              -e 's|docs/assets/|assets/|g' \
              "$f"
          }

          # Podmień ścieżki w skopiowanych plikach docelowych (w docs/)
          normalize_md docs/Lista_Szkolen.md   || true
          normalize_md docs/Portfolio.md       || true
          normalize_md docs/Opis_Zajec.md      || true
          # (opcjonalnie) jeśli kopiujesz inne *.md do docs/, dodaj je tutaj:
          # normalize_md docs/cv-cv.md || true
          
      - name: Generate checksums & manifest
        if: steps.copy.outputs.copied == '1'
        shell: bash
        run: |
          cd docs
          { ls -1 *.pdf 2>/dev/null; ls -1 *.docx 2>/dev/null; ls -1 *.md 2>/dev/null; } | sort > MANIFEST.txt || true
          { [ -n "$(ls -1 *.pdf 2>/dev/null)" ] || [ -n "$(ls -1 *.docx 2>/dev/null)" ]; } && sha256sum *.pdf *.docx > CHECKSUMS.sha256 || true

      - name: Auto-commit docs/ changes
        if: steps.copy.outputs.copied == '1'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: sync CV + public content to /docs (auto)"
          file_pattern: docs/*

  release:
    name: Optional Release with CV assets
    needs: sync
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Collect assets
        shell: bash
        run: |
          mkdir -p dist
          cp docs/*.pdf dist/ 2>/dev/null || true
          cp docs/*.docx dist/ 2>/dev/null || true
          cp docs/CHECKSUMS.sha256 dist/ 2>/dev/null || true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: cv-${{ github.run_number }}
          name: "CV assets build #${{ github.run_number }}"
          body: "Automated release with current CV files and checksums."
          files: |
            dist/*.pdf
            dist/*.docx
            dist/CHECKSUMS.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
